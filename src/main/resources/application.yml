server:
  port: 8080

  tomcat:
    connection-timeout: 60s
    threads:
      max: 200
      min-spare: 10
    max-http-form-post-size: 10MB

spring:
  application:
    name: instructions-capture-service

  servlet:
    multipart:
      max-file-size: 10MB
      max-request-size: 10MB

  profiles:
    active: local

  kafka:
    consumer:
      group-id: ${KAFKA_CONSUMER_GROUP:capture-service}
      auto-offset-reset: earliest
      enable-auto-commit: true
      value-deserializer: org.springframework.kafka.support.serializer.ErrorHandlingDeserializer
      key-deserializer: org.springframework.kafka.support.serializer.ErrorHandlingDeserializer
      properties:
        spring.deserializer.value.delegate.class: org.springframework.kafka.support.serializer.JsonDeserializer
        spring.deserializer.key.delegate.class: org.apache.kafka.common.serialization.StringDeserializer
        spring.json.trusted.packages: "*"
        spring.json.type.mapping: "canonicalTrade:com.example.instructions.model.CanonicalTrade"
        spring.json.use.type.headers: false
        spring.json.value.default.type: "com.example.instructions.model.CanonicalTrade"
        connections.max.idle.ms: 600000  # 10 minutes
        reconnect.backoff.ms: 1000
        reconnect.backoff.max.ms: 10000
        session.timeout.ms: 30000
        heartbeat.interval.ms: 3000
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
      retries: 3
      batch-size: 16384
      linger-ms: 1
      buffer-memory: 33554432
      properties:
        connections.max.idle.ms: 600000  # 10 minutes (default is 9 minutes)
        reconnect.backoff.ms: 1000
        reconnect.backoff.max.ms: 10000
        request.timeout.ms: 30000
        delivery.timeout.ms: 120000

  task:
    execution:
      pool:
        core-size: 8
        max-size: 16
        queue-capacity: 100

  mvc:
    async:
      request-timeout: 300000  # 5 minutes timeout for async requests

logging:
  level:
    com.example.instructions: ${LOG_LEVEL:INFO}
    org.springframework.kafka: WARN
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss} - %msg%n"
  file:
    name: logs/instructions-capture-service.log

management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus
  endpoint:
    health:
      show-details: when-authorized
  info:
    env:
      enabled: true

# Springdoc OpenAPI configuration
springdoc:
  api-docs:
    path: /v3/api-docs
  swagger-ui:
    path: /swagger-ui.html
    enabled: true
    operationsSorter: method
    tagsSorter: alpha
    displayRequestDuration: true

# JWT Configuration
jwt:
  # IMPORTANT: Change this secret in production! Use a strong random value (at least 256 bits)
  # Generate using: openssl rand -base64 64
  secret: ${JWT_SECRET:YourSecretKeyHereShouldBeAtLeast256BitsLongForHS256AlgorithmToWorkProperly123456789}
  expiration: ${3600000}  # 1 hour in milliseconds
